// TESTE COMPLETO - PARTE 4: GEST√ÉO E CONTROLE
// ============================================================================

const { sequelize } = require('./src/main/database/config');

// Importar modelos atualizados
const Estoque = require('./src/main/models/estoque');
const MovimentacaoEstoque = require('./src/main/models/movimentacaoEstoque');
const ControleMudancas = require('./src/main/models/controleMudancas');

async function testarParte4() {
  try {
    console.log('üöÄ INICIANDO TESTES DA PARTE 4: GEST√ÉO E CONTROLE\n');
    
    // ========================================================================
    // 1. SINCRONIZA√á√ÉO DO BANCO DE DADOS
    // ========================================================================
    console.log('üìä 1. SINCRONIZANDO BANCO DE DADOS...');
    await sequelize.sync({ force: true });
    console.log('‚úÖ Banco sincronizado com sucesso!\n');
    
    // ========================================================================
    // 2. TESTE DO M√ìDULO DE ESTOQUE
    // ========================================================================
    console.log('üì¶ 2. TESTANDO M√ìDULO DE ESTOQUE...');
    
    const itemEstoque = await Estoque.create({
      numero_serie_equipamento: 'EQ-TEST-001',
      localizacao_fisica: 'Almoxarifado Principal - Setor A',
      setor_estoque: 'Almoxarifado_Principal',
      prateleira: 'A1',
      posicao: 'B2',
      codigo_barras: '1234567890123',
      status_estoque: 'Disponivel',
      condicao_fisica: 'Excelente',
      responsavel_estoque: 'Jo√£o Silva',
      numero_patrimonio: 'PAT-2024-001',
      valor_aquisicao: 15000.00,
      data_aquisicao: new Date('2024-01-15'),
      fornecedor: 'Fornecedor Teste Ltda',
      garantia_fabricante_meses: 24,
      data_inicio_garantia: new Date('2024-01-15'),
      data_fim_garantia: new Date('2026-01-15'),
      periodicidade_inspecao_meses: 6,
      criado_por: 1
    });
    
    console.log('‚úÖ Item de estoque criado:', {
      id: itemEstoque.id,
      numero_serie: itemEstoque.numero_serie_equipamento,
      localizacao: itemEstoque.localizacao_fisica,
      setor: itemEstoque.setor_estoque,
      status: itemEstoque.status_estoque,
      em_garantia: itemEstoque.em_garantia
    });
    
    // Testar m√©todos do estoque
    console.log('üîß Testando m√©todos do estoque...');
    
    // Reservar item
    await itemEstoque.reservar('Projeto Alpha', 'Instala√ß√£o urgente', 1);
    console.log('‚úÖ Item reservado com sucesso');
    
    // Liberar reserva
    await itemEstoque.liberarReserva(1);
    console.log('‚úÖ Reserva liberada com sucesso');
    
    // Colocar em quarentena
    await itemEstoque.colocarEmQuarentena('Suspeita de defeito', 1);
    console.log('‚úÖ Item colocado em quarentena');
    
    // Liberar quarentena
    await itemEstoque.liberarQuarentena(1);
    console.log('‚úÖ Item liberado da quarentena');
    
    // Realizar inspe√ß√£o
    await itemEstoque.realizarInspecao('Aprovado', 'Equipamento em perfeitas condi√ß√µes', 1);
    console.log('‚úÖ Inspe√ß√£o realizada com sucesso\n');
    
    // ========================================================================
    // 3. TESTE DO M√ìDULO DE MOVIMENTA√á√ÉO DE ESTOQUE
    // ========================================================================
    console.log('üìã 3. TESTANDO M√ìDULO DE MOVIMENTA√á√ÉO DE ESTOQUE...');
    
    const movimentacao = await MovimentacaoEstoque.create({
      numero_serie_equipamento: 'EQ-TEST-001',
      tipo_movimentacao: 'Saida',
      solicitante: 'Maria Santos',
      solicitante_id: 1,
      justificativa: 'Necess√°rio para instala√ß√£o no Polo Norte',
      urgencia: 'Alta',
      data_necessidade: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 dias
      localizacao_origem: 'Almoxarifado Principal',
      localizacao_destino: 'Polo Norte - Instala√ß√£o 01',
      responsavel_origem: 'Jo√£o Silva',
      responsavel_destino: 'Pedro Costa',
      centro_custo_origem: 'CC001',
      centro_custo_destino: 'CC002',
      condicao_antes: 'Excelente',
      documento_transporte: 'DOC-TRANS-001',
      valor_movimentacao: 500.00,
      moeda: 'BRL',
      criado_por: 1
    });
    
    console.log('‚úÖ Movimenta√ß√£o criada:', {
      id: movimentacao.id,
      numero: movimentacao.numero_movimentacao,
      tipo: movimentacao.tipo_movimentacao,
      status: movimentacao.status_movimentacao,
      requer_aprovacao: movimentacao.requer_aprovacao,
      aprovador_necessario: movimentacao.aprovador_necessario
    });
    
    // Testar workflow de aprova√ß√£o
    console.log('üîß Testando workflow de movimenta√ß√£o...');
    
    // Aprovar movimenta√ß√£o
    await movimentacao.aprovar(1, 'Aprovado para instala√ß√£o urgente');
    console.log('‚úÖ Movimenta√ß√£o aprovada');
    
    // Iniciar execu√ß√£o
    await movimentacao.iniciarExecucao(1);
    console.log('‚úÖ Execu√ß√£o iniciada');
    
    // Concluir movimenta√ß√£o
    await movimentacao.concluir(1, 'Equipamento entregue e instalado com sucesso');
    console.log('‚úÖ Movimenta√ß√£o conclu√≠da');
    console.log('‚è±Ô∏è Tempo de execu√ß√£o:', movimentacao.tempo_execucao_horas, 'horas\n');
    
    // ========================================================================
    // 4. TESTE DO M√ìDULO DE CONTROLE DE MUDAN√áAS (MOC)
    // ========================================================================
    console.log('üìù 4. TESTANDO M√ìDULO DE CONTROLE DE MUDAN√áAS (MOC)...');
    
    const moc = await ControleMudancas.create({
      titulo_mudanca: 'Atualiza√ß√£o do Sistema de Medi√ß√£o - Polo Norte',
      descricao_mudanca: 'Substitui√ß√£o do sistema de medi√ß√£o atual por equipamentos de maior precis√£o para atender aos novos requisitos regulat√≥rios.',
      categoria_mudanca: 'Equipamento',
      tipo_mudanca: 'Permanente',
      urgencia: 'Alta',
      solicitante_id: 1,
      area_solicitante: 'Engenharia de Produ√ß√£o',
      justificativa_mudanca: 'Necess√°rio para conformidade com novas normas ANP e melhoria da precis√£o das medi√ß√µes fiscais.',
      beneficios_esperados: 'Maior precis√£o nas medi√ß√µes, redu√ß√£o de incertezas, conformidade regulat√≥ria.',
      consequencias_nao_implementar: 'Poss√≠veis multas regulat√≥rias e perda de precis√£o nas medi√ß√µes fiscais.',
      equipamentos_afetados: JSON.stringify(['EQ-TEST-001', 'EQ-TEST-002']),
      sistemas_afetados: JSON.stringify(['Sistema SCADA', 'Sistema Fiscal']),
      data_implementacao_planejada: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias
      duracao_planejada_dias: 15,
      equipe_implementacao: JSON.stringify([
        { nome: 'Jo√£o Silva', funcao: 'Coordenador' },
        { nome: 'Maria Santos', funcao: 'Engenheira' },
        { nome: 'Pedro Costa', funcao: 'T√©cnico' }
      ]),
      impacto_operacional: 'Alto',
      impacto_seguranca: 'Medio',
      impacto_ambiental: 'Baixo',
      impacto_qualidade: 'Alto',
      custo_estimado: 250000.00,
      moeda: 'BRL',
      centro_custo: 'CC001',
      aprovacao_tecnica_necessaria: true,
      aprovacao_seguranca_necessaria: true,
      aprovacao_financeira_necessaria: true,
      plano_implementacao: 'Fase 1: Prepara√ß√£o e aquisi√ß√£o\nFase 2: Instala√ß√£o\nFase 3: Testes\nFase 4: Comissionamento',
      plano_rollback: 'Em caso de falha, retornar ao sistema anterior mantendo backup das configura√ß√µes.',
      criterios_sucesso: 'Medi√ß√µes dentro da faixa de incerteza especificada, aprova√ß√£o nos testes de conformidade.',
      requer_treinamento: true,
      plano_treinamento: 'Treinamento de 40h para operadores sobre o novo sistema.',
      criado_por: 1
    });
    
    console.log('‚úÖ MOC criada:', {
      id: moc.id,
      numero: moc.numero_moc,
      titulo: moc.titulo_mudanca,
      categoria: moc.categoria_mudanca,
      status: moc.status_moc,
      todas_aprovacoes_concluidas: moc.todas_aprovacoes_concluidas
    });
    
    // Testar workflow de MOC
    console.log('üîß Testando workflow de MOC...');
    
    // Submeter MOC
    await moc.submeter(1);
    console.log('‚úÖ MOC submetida');
    
    // Aprovar tecnicamente
    await moc.aprovarTecnico(1, 'Solu√ß√£o t√©cnica aprovada. Equipamentos atendem aos requisitos.');
    console.log('‚úÖ Aprova√ß√£o t√©cnica concedida');
    
    // Simular outras aprova√ß√µes (seguran√ßa e financeira)
    moc.aprovacao_seguranca_concedida = true;
    moc.aprovador_seguranca_id = 1;
    moc.data_aprovacao_seguranca = new Date();
    moc.observacoes_aprovacao_seguranca = 'Procedimentos de seguran√ßa adequados.';
    
    moc.aprovacao_financeira_concedida = true;
    moc.aprovador_financeiro_id = 1;
    moc.data_aprovacao_financeira = new Date();
    moc.observacoes_aprovacao_financeira = 'Or√ßamento aprovado dentro do limite.';
    
    await moc.save();
    console.log('‚úÖ Todas as aprova√ß√µes concedidas');
    console.log('‚úÖ Status de aprova√ß√µes:', moc.todas_aprovacoes_concluidas);
    
    // Iniciar implementa√ß√£o
    await moc.iniciarImplementacao(1);
    console.log('‚úÖ Implementa√ß√£o iniciada');
    
    // Atualizar progresso
    await moc.atualizarProgresso(25, 1, 'Fase 1 conclu√≠da - Equipamentos adquiridos');
    console.log('‚úÖ Progresso atualizado: 25%');
    
    await moc.atualizarProgresso(50, 1, 'Fase 2 conclu√≠da - Instala√ß√£o realizada');
    console.log('‚úÖ Progresso atualizado: 50%');
    
    await moc.atualizarProgresso(75, 1, 'Fase 3 conclu√≠da - Testes aprovados');
    console.log('‚úÖ Progresso atualizado: 75%');
    
    await moc.atualizarProgresso(100, 1, 'Fase 4 conclu√≠da - Sistema comissionado e operacional');
    console.log('‚úÖ MOC conclu√≠da com sucesso');
    console.log('‚è±Ô∏è Dura√ß√£o real:', moc.duracao_real_calculada, 'dias\n');
    
    // ========================================================================
    // 5. TESTE DE ESTAT√çSTICAS
    // ========================================================================
    console.log('üìä 5. TESTANDO ESTAT√çSTICAS DOS M√ìDULOS...');
    
    // Estat√≠sticas do Estoque
    const statsEstoque = await Estoque.obterEstatisticas();
    console.log('üì¶ Estat√≠sticas do Estoque:', statsEstoque);
    
    // Estat√≠sticas da Movimenta√ß√£o
    const statsMovimentacao = await MovimentacaoEstoque.obterEstatisticas();
    console.log('üìã Estat√≠sticas da Movimenta√ß√£o:', statsMovimentacao);
    
    // Estat√≠sticas do MOC
    const statsMOC = await ControleMudancas.obterEstatisticas();
    console.log('üìù Estat√≠sticas do MOC:', statsMOC);
    
    // ========================================================================
    // 6. TESTE DE CONSULTAS ESPECIALIZADAS
    // ========================================================================
    console.log('\nüîç 6. TESTANDO CONSULTAS ESPECIALIZADAS...');
    
    // Itens vencendo garantia
    const itensVencendoGarantia = await Estoque.obterItensVencendoGarantia(365);
    console.log('‚ö†Ô∏è Itens vencendo garantia (pr√≥ximos 365 dias):', itensVencendoGarantia.length);
    
    // Movimenta√ß√µes pendentes de aprova√ß√£o
    const movimentacoesPendentes = await MovimentacaoEstoque.obterPendentesAprovacao();
    console.log('‚è≥ Movimenta√ß√µes pendentes de aprova√ß√£o:', movimentacoesPendentes.length);
    
    // MOCs pendentes de aprova√ß√£o t√©cnica
    const mocsPendentes = await ControleMudancas.obterPendentesAprovacao('tecnica');
    console.log('‚è≥ MOCs pendentes de aprova√ß√£o t√©cnica:', mocsPendentes.length);
    
    // MOCs vencendo prazo
    const mocsVencendoPrazo = await ControleMudancas.obterVencendoPrazo(30);
    console.log('‚ö†Ô∏è MOCs vencendo prazo (pr√≥ximos 30 dias):', mocsVencendoPrazo.length);
    
    // ========================================================================
    // 7. TESTE DE VALIDA√á√ïES
    // ========================================================================
    console.log('\n‚úÖ 7. TESTANDO VALIDA√á√ïES...');
    
    try {
      // Tentar criar item de estoque com dados inv√°lidos
      await Estoque.create({
        numero_serie_equipamento: 'EQ-INVALID',
        localizacao_fisica: '', // Vazio - deve falhar
        status_estoque: 'Disponivel'
      });
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o de estoque funcionando:', error.message);
    }
    
    try {
      // Tentar aprovar movimenta√ß√£o que n√£o requer aprova√ß√£o
      const movSimples = await MovimentacaoEstoque.create({
        numero_serie_equipamento: 'EQ-TEST-002',
        tipo_movimentacao: 'Entrada', // N√£o requer aprova√ß√£o
        solicitante: 'Teste',
        justificativa: 'Teste',
        criado_por: 1
      });
      
      await movSimples.aprovar(1);
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o de movimenta√ß√£o funcionando:', error.message);
    }
    
    try {
      // Tentar iniciar implementa√ß√£o de MOC sem aprova√ß√µes
      const mocInvalida = await ControleMudancas.create({
        titulo_mudanca: 'Teste Inv√°lida',
        descricao_mudanca: 'Teste',
        categoria_mudanca: 'Equipamento',
        solicitante_id: 1,
        area_solicitante: 'Teste',
        justificativa_mudanca: 'Teste',
        criado_por: 1
      });
      
      await mocInvalida.iniciarImplementacao(1);
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o de MOC funcionando:', error.message);
    }
    
    // ========================================================================
    // RESULTADO FINAL
    // ========================================================================
    console.log('\nüéâ TESTES DA PARTE 4 CONCLU√çDOS COM SUCESSO!');
    console.log('=====================================');
    console.log('‚úÖ M√≥dulo de Estoque: FUNCIONANDO');
    console.log('‚úÖ M√≥dulo de Movimenta√ß√£o: FUNCIONANDO');
    console.log('‚úÖ M√≥dulo de MOC: FUNCIONANDO');
    console.log('‚úÖ Valida√ß√µes: FUNCIONANDO');
    console.log('‚úÖ Estat√≠sticas: FUNCIONANDO');
    console.log('‚úÖ Consultas Especializadas: FUNCIONANDO');
    console.log('=====================================');
    console.log('üöÄ PARTE 4: GEST√ÉO E CONTROLE - 100% OPERACIONAL!');
    
  } catch (error) {
    console.error('‚ùå ERRO NOS TESTES:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await sequelize.close();
  }
}

// Executar testes
testarParte4().then(() => {
  console.log('\n‚úÖ Testes finalizados');
  process.exit(0);
}).catch((error) => {
  console.error('\n‚ùå Erro fatal:', error);
  process.exit(1);
});

